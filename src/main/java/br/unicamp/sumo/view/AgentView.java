/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.unicamp.sumo.view;

import br.unicamp.cst.core.entities.Codelet;
import br.unicamp.cst.motivational.MotivationalMonitor;

import javax.swing.table.DefaultTableModel;
import java.beans.PropertyVetoException;
import java.util.List;

/**
 *
 * @author Du
 */
public class AgentView extends javax.swing.JInternalFrame {


    private MotivationalMonitor motivationalMonitorDrive;
    private MotivationalMonitor motivationalMonitorGoal;
    private List<Codelet> lstOfDrives;
    private List<Codelet> lstOfGoals;

    private int openFrameCount = 0;
    private int timestamp = 100;

    /**
     * Creates new form Agent
     */
    public AgentView(int openFrameCount, int timestamp, List<Codelet> lstOfDrives, List<Codelet> lstOfGoals) {
        this.setOpenFrameCount(openFrameCount);
        initComponents();
        setLocation(30*openFrameCount, 0);

        setLstOfDrives(lstOfDrives);
        setLstOfGoals(lstOfGoals);

        setTimestamp(timestamp);

        chkUpdate.setSelected(false);
        
        try {
            
            this.setIcon(true);
            
        } catch (PropertyVetoException e) {
            e.printStackTrace();
        }

    }
    
    
     public void clearTable(){
        DefaultTableModel dm = (DefaultTableModel) getTbVehicles().getModel();
        int rowCount = dm.getRowCount();

        for (int i = rowCount - 1; i >= 0; i--) {
            dm.removeRow(i);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        lblNameValue = new javax.swing.JLabel();
        lblOccupancy = new javax.swing.JLabel();
        lblOccupancyValue = new javax.swing.JLabel();
        lblMeanVelocity = new javax.swing.JLabel();
        lblMeanVelocityValue = new javax.swing.JLabel();
        lblNumVehicles = new javax.swing.JLabel();
        lblNumVehiclesValue = new javax.swing.JLabel();
        lblState = new javax.swing.JLabel();
        lblStateValue = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbVehicles = new javax.swing.JTable();
        pnlLight = new javax.swing.JPanel();
        chkUpdate = new javax.swing.JCheckBox();
        btnDrives = new javax.swing.JButton();
        btnGoals = new javax.swing.JButton();

        setIconifiable(true);
        setMaximizable(true);
        setAutoscrolls(true);
        setDoubleBuffered(true);
        setVisible(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setToolTipText("Agent");
        jPanel1.setLayout(new java.awt.GridLayout(5, 2));

        lblName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblName.setText("Agent Name:");
        jPanel1.add(lblName);

        lblNameValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNameValue.setText("-");
        jPanel1.add(lblNameValue);

        lblOccupancy.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblOccupancy.setText("Occupancy:");
        jPanel1.add(lblOccupancy);

        lblOccupancyValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblOccupancyValue.setText("-");
        jPanel1.add(lblOccupancyValue);

        lblMeanVelocity.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMeanVelocity.setText("Mean Velocity:");
        jPanel1.add(lblMeanVelocity);

        lblMeanVelocityValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMeanVelocityValue.setText("-");
        jPanel1.add(lblMeanVelocityValue);

        lblNumVehicles.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNumVehicles.setText("Num. Vehicles:");
        jPanel1.add(lblNumVehicles);
        lblNumVehicles.getAccessibleContext().setAccessibleName("Vehicles Num.:");

        lblNumVehiclesValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNumVehiclesValue.setText("-");
        jPanel1.add(lblNumVehiclesValue);

        lblState.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblState.setText("State:");
        jPanel1.add(lblState);

        lblStateValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblStateValue.setText("-");
        jPanel1.add(lblStateValue);

        tbVehicles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lane ID", "Vehicle ID"
            }
        ));
        jScrollPane1.setViewportView(tbVehicles);

        pnlLight.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlLight.setLayout(new java.awt.GridLayout(0, 2));

        chkUpdate.setText("Update");
        chkUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkUpdateActionPerformed(evt);
            }
        });

        btnDrives.setText("Drives");
        btnDrives.setEnabled(false);
        btnDrives.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDrivesActionPerformed(evt);
            }
        });

        btnGoals.setText("Goals");
        btnGoals.setEnabled(false);
        btnGoals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoalsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlLight, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(chkUpdate)
                .addGap(18, 18, 18)
                .addComponent(btnDrives)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGoals)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDrives, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(chkUpdate)
                        .addComponent(btnGoals)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlLight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))
        );

        jPanel1.getAccessibleContext().setAccessibleName("Agent");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chkUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkUpdateActionPerformed
        if(chkUpdate.isSelected()){
            btnGoals.setEnabled(true);
            btnDrives.setEnabled(true);
            setMotivationalMonitorDrive(new MotivationalMonitor(getLstOfDrives(), getTimestamp(), "Drives Activation of Agent: " + getTitle(), "Drives"));
            setMotivationalMonitorGoal(new MotivationalMonitor(getLstOfGoals(), getTimestamp(), "Goals Vote of Agent: " + getTitle(), "Goals"));
        }
        else
        {
            btnGoals.setEnabled(false);
            btnDrives.setEnabled(false);
            getMotivationalMonitorDrive().stop();
            getMotivationalMonitorGoal().stop();
        }
    }//GEN-LAST:event_chkUpdateActionPerformed

    private void btnDrivesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDrivesActionPerformed
        getMotivationalMonitorDrive().start();
    }//GEN-LAST:event_btnDrivesActionPerformed

    private void btnGoalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoalsActionPerformed
        getMotivationalMonitorGoal().start();
    }//GEN-LAST:event_btnGoalsActionPerformed

    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDrives;
    private javax.swing.JButton btnGoals;
    private javax.swing.JCheckBox chkUpdate;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMeanVelocity;
    private javax.swing.JLabel lblMeanVelocityValue;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblNameValue;
    private javax.swing.JLabel lblNumVehicles;
    private javax.swing.JLabel lblNumVehiclesValue;
    private javax.swing.JLabel lblOccupancy;
    private javax.swing.JLabel lblOccupancyValue;
    private javax.swing.JLabel lblState;
    private javax.swing.JLabel lblStateValue;
    private javax.swing.JPanel pnlLight;
    private javax.swing.JTable tbVehicles;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the openFrameCount
     */
    public int getOpenFrameCount() {
        return openFrameCount;
    }

    /**
     * @param openFrameCount the openFrameCount to set
     */
    public void setOpenFrameCount(int openFrameCount) {
        this.openFrameCount = openFrameCount;
    }

    /**
     * @return the lblMeanVelocityValue
     */
    public javax.swing.JLabel getLblMeanVelocityValue() {
        return lblMeanVelocityValue;
    }

    /**
     * @param lblMeanVelocityValue the lblMeanVelocityValue to set
     */
    public void setLblMeanVelocityValue(javax.swing.JLabel lblMeanVelocityValue) {
        this.lblMeanVelocityValue = lblMeanVelocityValue;
    }

    /**
     * @return the lblNameValue
     */
    public javax.swing.JLabel getLblNameValue() {
        return lblNameValue;
    }

    /**
     * @param lblNameValue the lblNameValue to set
     */
    public void setLblNameValue(javax.swing.JLabel lblNameValue) {
        this.lblNameValue = lblNameValue;
    }

    /**
     * @return the lblNumVehiclesValue
     */
    public javax.swing.JLabel getLblNumVehiclesValue() {
        return lblNumVehiclesValue;
    }

    /**
     * @param lblNumVehiclesValue the lblNumVehiclesValue to set
     */
    public void setLblNumVehiclesValue(javax.swing.JLabel lblNumVehiclesValue) {
        this.lblNumVehiclesValue = lblNumVehiclesValue;
    }

    /**
     * @return the lblOccupancyValue
     */
    public javax.swing.JLabel getLblOccupancyValue() {
        return lblOccupancyValue;
    }

    /**
     * @param lblOccupancyValue the lblOccupancyValue to set
     */
    public void setLblOccupancyValue(javax.swing.JLabel lblOccupancyValue) {
        this.lblOccupancyValue = lblOccupancyValue;
    }

    /**
     * @return the lblStateValue
     */
    public javax.swing.JLabel getLblStateValue() {
        return lblStateValue;
    }

    /**
     * @param lblStateValue the lblStateValue to set
     */
    public void setLblStateValue(javax.swing.JLabel lblStateValue) {
        this.lblStateValue = lblStateValue;
    }

    /**
     * @return the tbVehicles
     */
    public javax.swing.JTable getTbVehicles() {
        return tbVehicles;
    }

    /**
     * @param tbVehicles the tbVehicles to set
     */
    public void setTbVehicles(javax.swing.JTable tbVehicles) {
        this.tbVehicles = tbVehicles;
    }

    /**
     * @return the pnlLight
     */
    public javax.swing.JPanel getPnlLight() {
        return pnlLight;
    }

    /**
     * @param pnlLight the pnlLight to set
     */
    public void setPnlLight(javax.swing.JPanel pnlLight) {
        this.pnlLight = pnlLight;
    }

    /**
     * @return the chkUpdate
     */
    public javax.swing.JCheckBox getChkUpdate() {
        return chkUpdate;
    }

    /**
     * @param chkUpdate the chkUpdate to set
     */
    public void setChkUpdate(javax.swing.JCheckBox chkUpdate) {
        this.chkUpdate = chkUpdate;
    }

    /**
     * @return the motivationalMonitorDrive
     */
    public MotivationalMonitor getMotivationalMonitorDrive() {
        return motivationalMonitorDrive;
    }

    /**
     * @param motivationalMonitorDrive the motivationalMonitorDrive to set
     */
    public void setMotivationalMonitorDrive(MotivationalMonitor motivationalMonitorDrive) {
        this.motivationalMonitorDrive = motivationalMonitorDrive;
    }

    /**
     * @return the codeletsMonitorGoal
     */
    public MotivationalMonitor getMotivationalMonitorGoal() {
        return motivationalMonitorGoal;
    }

    /**
     * @param motivationalMonitorGoal the codeletsMonitorGoal to set
     */
    public void setMotivationalMonitorGoal(MotivationalMonitor motivationalMonitorGoal) {
        this.motivationalMonitorGoal = motivationalMonitorGoal;
    }

    public List<Codelet> getLstOfDrives() {
        return lstOfDrives;
    }

    public void setLstOfDrives(List<Codelet> lstOfDrives) {
        this.lstOfDrives = lstOfDrives;
    }

    public List<Codelet> getLstOfGoals() {
        return lstOfGoals;
    }

    public void setLstOfGoals(List<Codelet> lstOfGoals) {
        this.lstOfGoals = lstOfGoals;
    }

    public int getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(int timestamp) {
        this.timestamp = timestamp;
    }
}
